"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""
import asyncio
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from utils.logger import logger
from services.database import db
from services.email_api import EmailAPIService
from services.proxy_manager import ProxyConfig, ProxyManager
from services.fiverr_registrator_selenium import FiverrRegistrator, register_accounts_batch
from config import ADMIN_IDS, MAX_CONCURRENT_REGISTRATIONS


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


async def send_long_message(update: Update, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
    max_length = 4096
    for i in range(0, len(text), max_length):
        await update.message.reply_text(
            text[i:i + max_length],
            parse_mode=ParseMode.HTML
        )


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await db.add_user(user.id, user.username)
    
    welcome_text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>

–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ Fiverr.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å API –ø–æ—á—Ç
/register - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/tasks - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
/accounts - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏
‚úÖ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ cookies
‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register
"""
    
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞</b>

<b>1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (/register)</b>
–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å—Ç–∏—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
- –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)
- –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

<b>2. –§–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:</b>
<code>username:password@ip:port</code>

–ü—Ä–∏–º–µ—Ä:
<code>user123:pass456@192.168.1.1:8080</code>

<b>3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (/balance)</b>
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å API –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ—á—Ç

<b>4. –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á (/tasks)</b>
–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–¥–∞—á –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏

<b>5. –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (/accounts)</b>
–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

<b>‚ùó –í–∞–∂–Ω–æ:</b>
- –û–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ = –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
- Cookies —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ {MAX_CONCURRENT_REGISTRATIONS} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
"""
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)


async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    user_id = update.effective_user.id
    
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å...")
    
    try:
        async with EmailAPIService() as email_service:
            balance = await email_service.get_balance()
            
            if balance is not None:
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                domains = await email_service.get_available_emails()
                
                response = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${balance:.4f}\n\n"
                
                if domains:
                    response += "<b>üìß –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—á—Ç—ã –¥–ª—è Fiverr:</b>\n"
                    for domain, info in domains.items():
                        count = info.get('count', 0)
                        price = info.get('price', 0)
                        if count > 0:
                            response += f"‚Ä¢ {domain}: {count} —à—Ç. (${price})\n"
                else:
                    response += "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—á—Ç"
                
                await update.message.reply_text(response, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω.",
                    parse_mode=ParseMode.HTML
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ balance_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞",
            parse_mode=ParseMode.HTML
        )


async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await db.is_user_active(user_id):
        await update.message.reply_text(
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    text = """
üöÄ <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>

<b>–®–∞–≥ 1:</b> –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50
"""
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)
    context.user_data['state'] = 'waiting_count'


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    state = context.user_data.get('state')
    
    if state == 'waiting_count':
        try:
            count = int(text)
            if 1 <= count <= 50:
                context.user_data['account_count'] = count
                context.user_data['state'] = 'waiting_proxies'
                
                await update.message.reply_text(
                    f"""
‚úÖ –ë—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>{count}</b> –∞–∫–∫–∞—É–Ω—Ç(–æ–≤)

<b>–®–∞–≥ 2:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)

<b>–§–æ—Ä–º–∞—Ç:</b>
<code>username:password@ip:port</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>user123:pass456@192.168.1.1:8080</code>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏: <b>{count}</b>
""",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
    
    elif state == 'waiting_proxies':
        proxies_text = text.strip().split('\n')
        account_count = context.user_data.get('account_count', 0)
        
        # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
        proxies = []
        invalid_proxies = []
        
        for proxy_str in proxies_text:
            proxy_str = proxy_str.strip()
            if not proxy_str:
                continue
            
            proxy = ProxyConfig.from_string(proxy_str)
            if proxy:
                proxies.append(proxy)
            else:
                invalid_proxies.append(proxy_str)
        
        if invalid_proxies:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:\n" + "\n".join(invalid_proxies) +
                f"\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: username:password@ip:port"
            )
            return
        
        if len(proxies) != account_count:
            await update.message.reply_text(
                f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ ({len(proxies)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({account_count})\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {account_count} –ø—Ä–æ–∫—Å–∏."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        context.user_data['proxies'] = proxies
        context.user_data['state'] = None
        
        await start_registration(update, context)


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    account_count = context.user_data.get('account_count')
    proxies = context.user_data.get('proxies')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    task_id = str(uuid.uuid4())
    proxies_str = [f"{p.username}:{p.password}@{p.host}:{p.port}" for p in proxies]
    
    await db.create_task(
        task_id=task_id,
        user_id=user_id,
        total_accounts=account_count,
        proxies=proxies_str
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    async with EmailAPIService() as email_service:
        balance = await email_service.get_balance()
        
        if balance is None or balance < 0.002 * account_count:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ API –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ—á—Ç"
            )
            await db.update_task_status(task_id, "failed")
            return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        f"""
‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>

ID –∑–∞–¥–∞—á–∏: <code>{task_id}</code>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {account_count}
–ü—Ä–æ–∫—Å–∏: {len(proxies)}

‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...
–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
""",
        parse_mode=ParseMode.HTML
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_task_status(task_id, "running")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(
        run_registration_task(update, task_id, account_count, proxies)
    )


async def run_registration_task(
    update: Update,
    task_id: str,
    account_count: int,
    proxies: list
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    try:
        async with EmailAPIService() as email_service:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            results = await register_accounts_batch(
                email_service=email_service,
                proxies=proxies,
                accounts_per_proxy=1
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = 0
            failed = 0
            
            for i, result in enumerate(results):
                if isinstance(result, dict) and result.get('success'):
                    successful += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
                    await db.save_account(
                        email=result['email'],
                        password=result['password'],
                        user_id=user_id,
                        task_id=task_id,
                        cookies=result['cookies'],
                        proxy=result.get('proxy')
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º cookies –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    cookies_file = result['cookies_file']
                    await update.effective_chat.send_document(
                        document=open(cookies_file, 'rb'),
                        caption=f"""
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç #{successful}</b>

Email: <code>{result['email']}</code>
–ü–∞—Ä–æ–ª—å: <code>{result['password']}</code>
""",
                        parse_mode=ParseMode.HTML
                    )
                    
                    await db.add_task_result(
                        task_id=task_id,
                        email=result['email'],
                        success=True
                    )
                else:
                    failed += 1
                    error = result.get('error', 'Unknown error') if isinstance(result, dict) else str(result)
                    await db.add_task_result(
                        task_id=task_id,
                        email=f"account_{i+1}",
                        success=False,
                        error=error
                    )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            await db.update_task_status(task_id, "completed")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            summary_text = f"""
üìä <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

ID –∑–∞–¥–∞—á–∏: <code>{task_id}</code>

‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}
‚ùå –û—à–∏–±–æ–∫: {failed}
üìã –í—Å–µ–≥–æ: {account_count}

–í—Å–µ cookies —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ.
"""
            await update.effective_chat.send_message(
                summary_text,
                parse_mode=ParseMode.HTML
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ run_registration_task: {e}")
        await db.update_task_status(task_id, "failed")
        
        await update.effective_chat.send_message(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{str(e)}"
        )


async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    user_id = update.effective_user.id
    
    tasks = await db.get_user_tasks(user_id, limit=10)
    
    if not tasks:
        await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
        return
    
    response = "<b>üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    
    status_emoji = {
        "pending": "‚è≥",
        "running": "üîÑ",
        "completed": "‚úÖ",
        "failed": "‚ùå"
    }
    
    for task in tasks:
        task_id = task['task_id'][:8]
        status = task['status']
        total = task['total_accounts']
        completed = task['completed_accounts']
        failed = task['failed_accounts']
        
        response += f"{status_emoji.get(status, '‚ùì')} <code>{task_id}</code>\n"
        response += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        response += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {completed + failed}/{total}\n"
        response += f"–£—Å–ø–µ—à–Ω–æ: {completed} | –û—à–∏–±–æ–∫: {failed}\n\n"
    
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)


async def accounts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts"""
    user_id = update.effective_user.id
    
    accounts = await db.get_user_accounts(user_id, limit=20)
    
    if not accounts:
        await update.message.reply_text("üìß –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return
    
    response = f"<b>üìß –í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(accounts)}):</b>\n\n"
    
    for i, account in enumerate(accounts, 1):
        email = account['email']
        created = account['created_at'].strftime('%Y-%m-%d %H:%M')
        
        response += f"{i}. <code>{email}</code>\n"
        response += f"   –°–æ–∑–¥–∞–Ω: {created}\n\n"
        
        if len(response) > 3500:
            await update.message.reply_text(response, parse_mode=ParseMode.HTML)
            response = ""
    
    if response:
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

