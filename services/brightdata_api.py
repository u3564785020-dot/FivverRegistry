"""
BrightData API Service –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç BrightData Unlocker –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ö–æ–¥–∞ PerimeterX –∏ –¥—Ä—É–≥–∏—Ö –∫–∞–ø—á
"""

import asyncio
import aiohttp
import json
from typing import Optional, Dict, Any
from utils.logger import logger


class BrightDataAPIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å BrightData API"""
    
    def __init__(self, api_key: str = "22200941061de75cc98202b395c45e754cb4ee077ab9fcf596a17df27151e9b6"):
        self.api_key = api_key
        self.base_url = "https://api.brightdata.com"
        self.zone = "web_unlocker2"
        self.session = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def unlock_url(self, url: str, format: str = "raw") -> Optional[Dict[str, Any]]:
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ URL —á–µ—Ä–µ–∑ BrightData Unlocker
        
        Args:
            url: URL –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            format: –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (raw, html, json)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        try:
            session = await self._get_session()
            
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            
            data = {
                "zone": self.zone,
                "url": url,
                "format": format
            }
            
            logger.info(f"üîì –ó–∞–ø—Ä–æ—Å –∫ BrightData –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {url}")
            
            async with session.post(
                f"{self.base_url}/request",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    result = await response.text()
                    logger.info(f"‚úÖ BrightData —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª URL")
                    
                    return {
                        "success": True,
                        "data": result,
                        "status_code": response.status,
                        "headers": dict(response.headers)
                    }
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ BrightData: {response.status} - {error_text}")
                    
                    return {
                        "success": False,
                        "error": f"HTTP {response.status}: {error_text}",
                        "status_code": response.status
                    }
                    
        except asyncio.TimeoutError:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ BrightData")
            return {
                "success": False,
                "error": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ BrightData"
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ BrightData API: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ API: {str(e)}"
            }
    
    async def get_proxy_config(self) -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è BrightData
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏
        """
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
            test_url = "https://geo.brdtest.com/welcome.txt?product=unlocker&method=api"
            result = await self.unlock_url(test_url)
            
            if result and result.get("success"):
                # BrightData –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Playwright
                return {
                    "server": f"http://{self.zone}.brightdata.com:22225",
                    "username": f"brd-customer-hl_{self.api_key[:8]}",
                    "password": self.api_key
                }
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ BrightData")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    async def unlock_fiverr_page(self, page_url: str = "https://it.fiverr.com/") -> Optional[str]:
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Fiverr —á–µ—Ä–µ–∑ BrightData
        
        Args:
            page_url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Fiverr
            
        Returns:
            HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            logger.info(f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Fiverr —á–µ—Ä–µ–∑ BrightData...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º "raw" —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ "html"
            result = await self.unlock_url(page_url, format="raw")
            
            if result and result.get("success"):
                html_content = result.get("data", "")
                logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ Fiverr —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (—Ä–∞–∑–º–µ—Ä: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return html_content
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Fiverr: {result.get('error')}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Fiverr: {e}")
            return None
    
    async def check_captcha_bypass(self, page_url: str = "https://it.fiverr.com/") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            page_url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –∫–∞–ø—á–∞ –æ–±–æ–π–¥–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏ –Ω–∞ {page_url}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º "raw" —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ "html"
            result = await self.unlock_url(page_url, format="raw")
            
            if result and result.get("success"):
                html_content = result.get("data", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–ø—á–∏ –≤ HTML
                captcha_indicators = [
                    "px-captcha",
                    "PRESS",
                    "HOLD", 
                    "captcha",
                    "recaptcha",
                    "hcaptcha",
                    "cloudflare"
                ]
                
                captcha_found = any(indicator.lower() in html_content.lower() for indicator in captcha_indicators)
                
                if not captcha_found:
                    logger.info("‚úÖ –ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–æ–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ BrightData!")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ö–∞–ø—á–∞ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    return False
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏: {result.get('error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏: {e}")
            return False
