#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ò–ô –†–ï–ì–ò–°–¢–†–ê–¢–û–† FIVERR –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
–°–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import aiohttp
import random
import string
import re
import time
import io
import base64
from datetime import datetime
from typing import Optional, Dict, Any
import logging
logger = logging.getLogger(__name__)
from services.email_api import EmailAPIService
from services.proxy_manager import ProxyConfig

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Selenium (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False
    logger.warning("Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

class FiverrRegistrator:
    def __init__(self, proxy: Optional[ProxyConfig] = None, use_proxy: bool = True):
        self.proxy = proxy
        self.use_proxy = use_proxy
        self.session = None
        self.csrf_token = None
        self.cookies = {}
        
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö User-Agent
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/120.0",
            "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/120.0",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Safari/605.1.15",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36 Edg/139.0.0.0"
        ]
    
    def _get_random_user_agent(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π User-Agent"""
        return random.choice(self.user_agents)
    
    async def _bypass_press_hold_captcha(self, driver) -> bool:
        """–û–±—Ö–æ–¥ –∫–∞–ø—á–∏ PRESS & HOLD"""
        try:
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏ –∫–∞–ø—á—É PRESS & HOLD...")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await asyncio.sleep(2)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É PRESS & HOLD –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            button_selectors = [
                "button[class*='press']",
                "button[class*='hold']", 
                "button[class*='captcha']",
                "div[class*='press']",
                "div[class*='hold']",
                "button:contains('PRESS')",
                "button:contains('HOLD')",
                "[data-testid*='captcha']",
                "[id*='captcha']",
                "button[style*='border']"
            ]
            
            button = None
            for selector in button_selectors:
                try:
                    if ":contains" in selector:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        xpath = f"//button[contains(text(), 'PRESS') or contains(text(), 'HOLD')]"
                        button = driver.find_element(By.XPATH, xpath)
                    else:
                        button = driver.find_element(By.CSS_SELECTOR, selector)
                    if button:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        break
                except:
                    continue
            
            if not button:
                logger.warning("–ö–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–∫–∏
            size = button.size
            logger.info(f"–†–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–∫–∏: {size}")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            from selenium.webdriver.common.action_chains import ActionChains
            
            actions = ActionChains(driver)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ –∫–Ω–æ–ø–∫–µ
            actions.move_to_element(button)
            
            # –ù–∞–∂–∏–º–∞–µ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º
            actions.click_and_hold(button)
            
            # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—Ç 7 –¥–æ 9 —Å–µ–∫—É–Ω–¥ (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –∫–∞–ø—á–∞)
            hold_time = random.uniform(7, 9)
            logger.info(f"–£–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É {hold_time:.1f} —Å–µ–∫—É–Ω–¥...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            actions.perform()
            
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(hold_time)
            
            # –û—Ç–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É
            actions.release(button).perform()
            
            logger.info("–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—É—â–µ–Ω–∞, –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–æ 10 —Å–µ–∫—É–Ω–¥)
            for _ in range(20):
                await asyncio.sleep(0.5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –∫–∞–ø—á–∞
                try:
                    current_url = driver.current_url
                    if "fiverr.com" in current_url and "px-captcha" not in current_url:
                        logger.info("–ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!")
                        return True
                except:
                    pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –æ—à–∏–±–∫–∏
                try:
                    page_source = driver.page_source
                    if "error" in page_source.lower() or "blocked" in page_source.lower():
                        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                        return False
                except:
                    pass
            
            logger.warning("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –∫–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –∫–∞–ø—á–∏: {e}")
            return False

    async def _take_step_screenshot(self, driver, step_name: str, telegram_bot = None, chat_id: int = None, email: str = None) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –≤ Telegram"""
        if not telegram_bot or not chat_id:
            return
            
        try:
            screenshot = driver.get_screenshot_as_png()
            from io import BytesIO
            screenshot_file = BytesIO(screenshot)
            screenshot_file.name = f"{step_name}_{email or 'unknown'}.png"
            
            await telegram_bot.send_photo(
                chat_id=chat_id,
                photo=screenshot_file,
                caption=f"üì∏ <b>{step_name}</b>\n\n"
                       f"üìß Email: <code>{email or 'N/A'}</code>\n"
                       f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                parse_mode='HTML'
            )
            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–∞–ø–∞ '{step_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç—Ç–∞–ø–∞ '{step_name}': {e}")

    async def _register_with_captcha_bypass(self, email: str, username: str, password: str, telegram_bot = None, chat_id: int = None) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ–±—Ö–æ–¥–æ–º –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        if not SELENIUM_AVAILABLE:
            return {
                "success": False,
                "error": "Selenium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω"
            }
        
        driver = None
        try:
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏...")
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            import subprocess
            try:
                # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome
                subprocess.run(["pkill", "-9", "-f", "chrome"], check=False, capture_output=True)
                subprocess.run(["pkill", "-9", "-f", "chromedriver"], check=False, capture_output=True)
                subprocess.run(["pkill", "-9", "-f", "chromium"], check=False, capture_output=True)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Chrome
                subprocess.run(["rm", "-rf", "/tmp/.com.google.Chrome*"], check=False, capture_output=True)
                subprocess.run(["rm", "-rf", "/tmp/chrome*"], check=False, capture_output=True)
                
                await asyncio.sleep(2)
                logger.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            options = Options()
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ incognito –±–µ–∑ user-data-dir
            options.add_argument('--incognito')
            options.add_argument('--no-first-run')
            options.add_argument('--disable-default-apps')
            options.add_argument('--no-user-data-dir')
            options.add_argument('--disable-extensions')
            options.add_argument('--disable-plugins')
            
            # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
            user_agent = self._get_random_user_agent()
            options.add_argument(f'--user-agent={user_agent}')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            driver = webdriver.Chrome(options=options)
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            driver.execute_cdp_cmd('Network.setUserAgentOverride', {"userAgent": user_agent})
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Fiverr...")
            driver.get("https://it.fiverr.com/")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(3)
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await self._take_step_screenshot(driver, "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Fiverr", telegram_bot, chat_id, email)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–ø—á–∞
            page_source = driver.page_source
            if "PRESS" in page_source and "HOLD" in page_source:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ PRESS & HOLD, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏...")
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ø—á–∏
                if telegram_bot and chat_id:
                    try:
                        screenshot = driver.get_screenshot_as_png()
                        from io import BytesIO
                        screenshot_file = BytesIO(screenshot)
                        screenshot_file.name = f"captcha_before_{email}.png"
                        
                        await telegram_bot.send_photo(
                            chat_id=chat_id,
                            photo=screenshot_file,
                            caption=f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ PRESS & HOLD</b>\n\n"
                                   f"üìß Email: <code>{email}</code>\n"
                                   f"üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Fiverr\n"
                                   f"ü§ñ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                
                # –û–±—Ö–æ–¥–∏–º –∫–∞–ø—á—É
                captcha_bypassed = await self._bypass_press_hold_captcha(driver)
                
                if not captcha_bypassed:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∫–∞–ø—á—É")
                    return {
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∫–∞–ø—á—É PRESS & HOLD"
                    }
                
                logger.info("–ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–æ–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏
                await self._take_step_screenshot(driver, "–ö–∞–ø—á–∞ –æ–±–æ–π–¥–µ–Ω–∞", telegram_bot, chat_id, email)
            
            # –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            try:
                # –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                email_selectors = [
                    "input[type='email']",
                    "input[name*='email']", 
                    "input[id*='email']",
                    "input[placeholder*='email' i]",
                    "input[placeholder*='Email' i]",
                    "input[data-testid*='email']"
                ]
                
                password_selectors = [
                    "input[type='password']",
                    "input[name*='password']",
                    "input[id*='password']",
                    "input[placeholder*='password' i]",
                    "input[placeholder*='Password' i]",
                    "input[data-testid*='password']"
                ]
                
                username_selectors = [
                    "input[name*='username']",
                    "input[id*='username']",
                    "input[placeholder*='username' i]",
                    "input[placeholder*='Username' i]",
                    "input[data-testid*='username']"
                ]
                
                # –ò—â–µ–º –ø–æ–ª—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                email_field = None
                for selector in email_selectors:
                    try:
                        email_field = driver.find_element(By.CSS_SELECTOR, selector)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        break
                    except:
                        continue
                
                password_field = None
                for selector in password_selectors:
                    try:
                        password_field = driver.find_element(By.CSS_SELECTOR, selector)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        break
                    except:
                        continue
                
                username_field = None
                for selector in username_selectors:
                    try:
                        username_field = driver.find_element(By.CSS_SELECTOR, selector)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        break
                    except:
                        continue
                
                if not email_field or not password_field:
                    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è email –∏–ª–∏ password")
                    return {
                        "success": False,
                        "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    }
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
                email_field.clear()
                email_field.send_keys(email)
                logger.info("–ü–æ–ª–µ email –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è email
                await self._take_step_screenshot(driver, "Email –∑–∞–ø–æ–ª–Ω–µ–Ω", telegram_bot, chat_id, email)
                
                password_field.clear()
                password_field.send_keys(password)
                logger.info("–ü–æ–ª–µ password –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º username –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ
                if username_field:
                    username_field.clear()
                    username_field.send_keys(username)
                    logger.info("–ü–æ–ª–µ username –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                else:
                    logger.info("–ü–æ–ª–µ username –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ")
                
                logger.info("–ü–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
                await self._take_step_screenshot(driver, "–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", telegram_bot, chat_id, email)
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                submit_selectors = [
                    "button[type='submit']",
                    "button[class*='submit']",
                    "button[class*='register']",
                    "button[class*='signup']",
                    "button[class*='join']",
                    "button[class*='create']",
                    "input[type='submit']",
                    "button:contains('Sign up')",
                    "button:contains('Join')",
                    "button:contains('Register')",
                    "button:contains('Create')",
                    "[data-testid*='submit']",
                    "[data-testid*='register']",
                    "[data-testid*='signup']"
                ]
                
                submit_button = None
                for selector in submit_selectors:
                    try:
                        if ":contains" in selector:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            text = selector.split("'")[1]
                            xpath = f"//button[contains(text(), '{text}')]"
                            submit_button = driver.find_element(By.XPATH, xpath)
                        else:
                            submit_button = driver.find_element(By.CSS_SELECTOR, selector)
                        if submit_button:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                            break
                    except:
                        continue
                
                if not submit_button:
                    logger.error("–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return {
                        "success": False,
                        "error": "–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    }
                
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                submit_button.click()
                logger.info("–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await self._take_step_screenshot(driver, "–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞", telegram_bot, chat_id, email)
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                await asyncio.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                current_url = driver.current_url
                page_source = driver.page_source
                
                if "success" in page_source.lower() or "welcome" in page_source.lower() or "dashboard" in current_url:
                    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    
                    # –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    await self._take_step_screenshot(driver, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", telegram_bot, chat_id, email)
                    
                    # –ü–æ–ª—É—á–∞–µ–º cookies
                    cookies = {}
                    for cookie in driver.get_cookies():
                        cookies[cookie['name']] = cookie['value']
                    
                    return {
                        "success": True,
                        "email": email,
                        "username": username,
                        "password": password,
                        "cookies": cookies,
                        "method": "browser_with_captcha_bypass"
                    }
                else:
                    logger.warning("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    return {
                        "success": False,
                        "error": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏"
                    }
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã: {e}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {str(e)}"
                }
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –∫–∞–ø—á–∏: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏: {str(e)}"
            }
        finally:
            if driver:
                try:
                    driver.quit()
                    logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except:
                    pass
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

    async def _take_captcha_screenshot(self, url: str = "https://it.fiverr.com/") -> Optional[bytes]:
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞–ø—á–µ–π"""
        if not SELENIUM_AVAILABLE:
            logger.warning("Selenium –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω")
            return None
        
        driver = None
        try:
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–∞–ø—á–∏...")
            
            # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            import subprocess
            try:
                subprocess.run(["pkill", "-f", "chrome"], check=False, capture_output=True)
                subprocess.run(["pkill", "-f", "chromedriver"], check=False, capture_output=True)
                await asyncio.sleep(1)
            except:
                pass
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            options = Options()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ incognito –±–µ–∑ user-data-dir
            options.add_argument('--incognito')
            options.add_argument('--no-first-run')
            options.add_argument('--disable-default-apps')
            options.add_argument('--no-user-data-dir')
            options.add_argument('--disable-extensions')
            options.add_argument('--disable-plugins')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ –¥–ª—è Selenium)
            # Chrome –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ --proxy-server
            # –ü—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ HTTP –∑–∞–ø—Ä–æ—Å–∞—Ö
            
            # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
            user_agent = self._get_random_user_agent()
            options.add_argument(f'--user-agent={user_agent}')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            driver = webdriver.Chrome(options=options)
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            driver.execute_cdp_cmd('Network.setUserAgentOverride', {"userAgent": user_agent})
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ {url}...")
            driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(3)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            logger.info("–î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            screenshot = driver.get_screenshot_as_png()
            
            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(screenshot)} –±–∞–π—Ç")
            return screenshot
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
        finally:
            if driver:
                try:
                    driver.quit()
                    logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except:
                    pass
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        connector = None
        if self.proxy and self.use_proxy:
            connector = aiohttp.TCPConnector()
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=30)
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    async def _get_csrf_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            url = "https://it.fiverr.com/"
            headers = {
                'User-Agent': self._get_random_user_agent(),
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'Accept-Language': 'it,it-IT;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br, zstd',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Sec-Fetch-User': '?1',
                'sec-ch-ua': '"Not:A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"'
            }
            
            async with self.session.get(url, headers=headers) as response:
                if response.status == 200:
                    html = await response.text()
                    
                    # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω –≤ HTML
                    csrf_patterns = [
                        r'name="csrf_token"\s+value="([^"]+)"',
                        r'name="_token"\s+value="([^"]+)"',
                        r'name="authenticity_token"\s+value="([^"]+)"',
                        r'"csrf_token":"([^"]+)"',
                        r'"csrfToken":"([^"]+)"',
                        r'"authenticity_token":"([^"]+)"',
                        r'window\.csrf_token\s*=\s*["\']([^"\']+)["\']',
                        r'window\._token\s*=\s*["\']([^"\']+)["\']',
                        r'<meta name="csrf-token" content="([^"]+)"',
                        r'<meta name="_token" content="([^"]+)"'
                    ]
                    
                    for pattern in csrf_patterns:
                        match = re.search(pattern, html)
                        if match:
                            self.csrf_token = match.group(1)
                            logger.info(f"CSRF —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {self.csrf_token[:20]}...")
                            return self.csrf_token
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ HTML, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
                    return await self._get_csrf_from_api()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    async def _get_csrf_from_api(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF
            api_urls = [
                "https://it.fiverr.com/api/v1/auth/csrf",
                "https://it.fiverr.com/api/v1/csrf",
                "https://it.fiverr.com/csrf",
                "https://it.fiverr.com/api/csrf"
            ]
            
            headers = {
                'User-Agent': self._get_random_user_agent(),
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'it,it-IT;q=0.9,en-US;q=0.8,en;q=0.7',
                'X-Requested-With': 'XMLHttpRequest',
                'Origin': 'https://it.fiverr.com',
                'Referer': 'https://it.fiverr.com/'
            }
            
            for url in api_urls:
                try:
                    async with self.session.get(url, headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()
                            if 'csrf_token' in data:
                                self.csrf_token = data['csrf_token']
                                logger.info(f"CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API: {self.csrf_token[:20]}...")
                                return self.csrf_token
                            elif 'token' in data:
                                self.csrf_token = data['token']
                                logger.info(f"CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API: {self.csrf_token[:20]}...")
                                return self.csrf_token
                except:
                    continue
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —á–µ—Ä–µ–∑ API: {e}")
            return None
    
    def _generate_username(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ text_text"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–≤–∞ —Å–ª–æ–≤–∞ –ø–æ 4-8 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–µ
        word1 = ''.join(random.choices(string.ascii_lowercase, k=random.randint(4, 8)))
        word2 = ''.join(random.choices(string.ascii_lowercase, k=random.randint(4, 8)))
        return f"{word1}_{word2}"
    
    def _generate_password(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        # –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        length = random.randint(8, 12)
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        uppercase = random.choice(string.ascii_uppercase)
        lowercase = random.choice(string.ascii_lowercase)
        digit = random.choice(string.digits)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        remaining = ''.join(random.choices(
            string.ascii_letters + string.digits,
            k=length - 3
        ))
        
        # –°–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
        password = list(uppercase + lowercase + digit + remaining)
        random.shuffle(password)
        
        return ''.join(password)
    
    async def _check_username_availability(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ API, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
        # Fiverr —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        return True
    
    async def _send_confirmation_code(self, email: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email"""
        try:
            url = "https://it.fiverr.com/api/v1/users/send_confirmation"
            headers = {
                'User-Agent': self._get_random_user_agent(),
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'it,it-IT;q=0.9,en-US;q=0.8,en;q=0.7',
                'X-Requested-With': 'XMLHttpRequest',
                'Origin': 'https://it.fiverr.com',
                'Referer': 'https://it.fiverr.com/',
                'Content-Type': 'application/json'
            }
            
            data = {'email': email}
            
            async with self.session.post(url, json=data, headers=headers) as response:
                return response.status == 200
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False
    
    async def register_account(self, email: str, email_service: EmailAPIService, email_id: str = None, telegram_bot = None, chat_id: int = None) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞ —Å email: {email}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            username = self._generate_username()
            password = self._generate_password()
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω username: {username}")
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å: {password}")
            
            # –°–†–ê–ó–£ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return await self._register_with_captcha_bypass(
                email=email,
                username=username,
                password=password,
                telegram_bot=telegram_bot,
                chat_id=chat_id
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    

async def register_accounts_batch(
    email_service: EmailAPIService,
    count: int,
    proxy: Optional[ProxyConfig] = None,
    use_proxy: bool = True,
    telegram_bot = None,
    chat_id: int = None,
    selected_domain: str = 'gmx.com'
) -> list:
    """–ü–∞–∫–µ—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    results = []
    
    async with FiverrRegistrator(proxy, use_proxy) as registrator:
        for i in range(count):
            try:
                logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}/{count}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ–º–µ–Ω
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω: {selected_domain}")
                
                # –ó–∞–∫–∞–∑—ã–≤–∞–µ–º email
                email_result = await email_service.order_email("fiverr.com", selected_domain)
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫–∞–∑–∞ email: {type(email_result)} - {email_result}")
                
                if not isinstance(email_result, dict) or not email_result.get("email"):
                    error_msg = email_result.get('value', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(email_result, dict) else str(email_result)
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å email: {error_msg}")
                    results.append({
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞ email: {error_msg}"
                    })
                    continue
                
                
                email = email_result["email"]
                logger.info(f"–ü–æ–ª—É—á–µ–Ω email: {email}")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}...")
                result = await registrator.register_account(
                    email=email, 
                    email_service=email_service, 
                    email_id=email_result.get("id"),
                    telegram_bot=telegram_bot,
                    chat_id=chat_id
                )
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {type(result)} - {result}")
                results.append(result)
                
                if isinstance(result, dict) and result.get("success"):
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {i+1} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                else:
                    error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(result, dict) else str(result)
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}: {error_msg}")
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                results.append({
                    "success": False,
                    "error": str(e)
                })
    
    return results
