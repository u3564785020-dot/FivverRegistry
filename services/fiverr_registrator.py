"""
Fiverr Account Registration - –¢–û–õ–¨–ö–û –ë–†–ê–£–ó–ï–†–ù–ê–Ø –≠–ú–£–õ–Ø–¶–ò–Ø
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ Fiverr –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ Selenium
"""

import asyncio
import random
import string
import time
import uuid
import subprocess
import shutil
from datetime import datetime
from typing import Optional, Dict, Any, List
from io import BytesIO

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
import undetected_chromedriver as uc

from utils.logger import logger
from services.proxy_manager import ProxyConfig
from services.email_api import EmailAPIService


class FiverrRegistrator:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Fiverr –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    
    def __init__(self, proxy: Optional[ProxyConfig] = None, use_proxy: bool = True):
        self.proxy = proxy
        self.use_proxy = use_proxy
        self.driver = None
        
    async def __aenter__(self):
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.driver:
            try:
                self.driver.quit()
            except:
                pass
    
    def _generate_username(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ username –≤ —Ñ–æ—Ä–º–∞—Ç–µ text_text"""
        first_part = ''.join(random.choices(string.ascii_lowercase, k=random.randint(6, 10)))
        second_part = ''.join(random.choices(string.ascii_lowercase, k=random.randint(6, 10)))
        return f"{first_part}_{second_part}"
    
    def _generate_password(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        length = random.randint(8, 12)
        password = []
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        password.append(random.choice(string.ascii_uppercase))  # –ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
        password.append(random.choice(string.ascii_lowercase))  # –°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞
        password.append(random.choice(string.digits))           # –¶–∏—Ñ—Ä–∞
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        for _ in range(length - 3):
            password.append(random.choice(string.ascii_letters + string.digits))
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        random.shuffle(password)
        return ''.join(password)
    
    def _get_random_user_agent(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent"""
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
        ]
        return random.choice(user_agents)
    
    
    async def _kill_chrome_processes(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome"""
        try:
            subprocess.run(["pkill", "-9", "-f", "chrome"], check=False)
            subprocess.run(["pkill", "-9", "-f", "chromedriver"], check=False)
            subprocess.run(["pkill", "-9", "-f", "chromium"], check=False)
            subprocess.run(["rm", "-rf", "/tmp/.com.google.Chrome*"], shell=True, check=False)
            subprocess.run(["rm", "-rf", "/tmp/chrome*"], shell=True, check=False)
            logger.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome: {e}")
    
    async def _take_step_screenshot(self, driver, step_name: str, telegram_bot = None, chat_id: int = None, email: str = None) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –≤ Telegram"""
        if not telegram_bot or not chat_id:
            return
            
        try:
            screenshot = driver.get_screenshot_as_png()
            screenshot_file = BytesIO(screenshot)
            screenshot_file.name = f"{step_name}_{email or 'unknown'}.png"
            
            await telegram_bot.send_photo(
                chat_id=chat_id,
                photo=screenshot_file,
                caption=f"üì∏ <b>{step_name}</b>\n\n"
                       f"üìß Email: <code>{email or 'N/A'}</code>\n"
                       f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                parse_mode='HTML'
            )
            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–∞–ø–∞ '{step_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç—Ç–∞–ø–∞ '{step_name}': {e}")
    
    async def _bypass_press_hold_captcha(self, driver) -> bool:
        """–û–±—Ö–æ–¥ –∫–∞–ø—á–∏ PRESS & HOLD"""
        try:
            logger.info("–ò—â–µ–º –∫–Ω–æ–ø–∫—É PRESS & HOLD...")
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–∞–ø—á–∏
            captcha_selectors = [
                "button[data-testid*='captcha']",
                "button[class*='captcha']",
                "button[class*='press']",
                "button[class*='hold']",
                "div[class*='captcha'] button",
                "div[class*='press'] button",
                "div[class*='hold'] button",
                "//button[contains(text(), 'PRESS')]",
                "//button[contains(text(), 'HOLD')]",
                "//button[contains(text(), 'Press')]",
                "//button[contains(text(), 'Hold')]",
                "//button[contains(text(), 'press')]",
                "//button[contains(text(), 'hold')]",
                "//div[contains(text(), 'PRESS')]//button",
                "//div[contains(text(), 'HOLD')]//button"
            ]
            
            captcha_button = None
            for selector in captcha_selectors:
                try:
                    if selector.startswith("//"):
                        captcha_button = driver.find_element(By.XPATH, selector)
                    else:
                        captcha_button = driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if captcha_button and captcha_button.is_displayed():
                        logger.info(f"–ö–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                except:
                    continue
            
            if not captcha_button:
                logger.warning("–ö–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏ PRESS & HOLD...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ActionChains –¥–ª—è click_and_hold
            actions = ActionChains(driver)
            
            # –ù–∞–∂–∏–º–∞–µ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            hold_time = random.uniform(7, 9)  # 7-9 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            logger.info(f"–£–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É {hold_time:.1f} —Å–µ–∫—É–Ω–¥...")
            
            actions.click_and_hold(captcha_button).perform()
            await asyncio.sleep(hold_time)
            actions.release(captcha_button).perform()
            
            logger.info("–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—É—â–µ–Ω–∞, –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –∫–∞–ø—á–∞
            page_source = driver.page_source
            if "PRESS" not in page_source and "HOLD" not in page_source:
                logger.info("–ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–æ–π–¥–µ–Ω–∞!")
                return True
            else:
                logger.warning("–ö–∞–ø—á–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ö–æ–¥–µ –∫–∞–ø—á–∏: {e}")
            return False
    
    async def _advanced_captcha_bypass(self, driver, captcha_type: str) -> bool:
        """–ü–†–û–î–í–ò–ù–£–¢–´–ô –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –õ–£–ß–®–ò–• –¢–ï–•–ù–û–õ–û–ì–ò–ô"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏ —Ç–∏–ø–∞: {captcha_type}")
            
            if captcha_type == "PRESS_HOLD":
                return await self._bypass_press_hold_advanced(driver)
            elif captcha_type == "PERIMETERX":
                return await self._bypass_perimeterx_advanced(driver)
            elif captcha_type == "GENERIC":
                return await self._bypass_generic_advanced(driver)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–∞–ø—á–∏: {captcha_type}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º –æ–±—Ö–æ–¥–µ –∫–∞–ø—á–∏: {e}")
            return False
    
    async def _bypass_press_hold_advanced(self, driver) -> bool:
        """–ü–†–û–î–í–ò–ù–£–¢–´–ô –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏ PRESS & HOLD —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            button_selectors = [
                "button[class*='press']",
                "button[class*='hold']", 
                "button:contains('PRESS')",
                "button:contains('HOLD')",
                "div[class*='press']",
                "div[class*='hold']",
                "//button[contains(text(), 'PRESS')]",
                "//button[contains(text(), 'HOLD')]",
                "//div[contains(text(), 'PRESS')]",
                "//div[contains(text(), 'HOLD')]",
                "//*[contains(@class, 'press')]",
                "//*[contains(@class, 'hold')]",
                "//*[contains(text(), 'PRESS') and contains(text(), 'HOLD')]"
            ]
            
            button = None
            for selector in button_selectors:
                try:
                    if selector.startswith("//"):
                        button = driver.find_element(By.XPATH, selector)
                    else:
                        button = driver.find_element(By.CSS_SELECTOR, selector)
                    if button:
                        logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                except:
                    continue
            
            if not button:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ PRESS & HOLD –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ï –ü–û–í–ï–î–ï–ù–ò–ï - –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("ü§ñ –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ...")
            
            # 1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–≤–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
            actions = ActionChains(driver)
            actions.move_to_element(button).perform()
            await asyncio.sleep(random.uniform(0.5, 1.0))
            
            # 2. –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –¥—É–º–∞–µ—Ç)
            await asyncio.sleep(random.uniform(0.2, 0.5))
            
            # 3. –ù–∞–∂–∏–º–∞–µ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ú–ò –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
            hold_time = random.uniform(7.5, 9.5)  # 7.5-9.5 —Å–µ–∫—É–Ω–¥
            logger.info(f"‚è±Ô∏è –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É {hold_time:.1f} —Å–µ–∫—É–Ω–¥ (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è)...")
            
            # 4. –ü–ª–∞–≤–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
            actions.click_and_hold(button).perform()
            
            # 5. –í–æ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
            for i in range(int(hold_time * 2)):  # –î–≤–∏–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫
                await asyncio.sleep(0.5)
                # –ù–µ–±–æ–ª—å—à–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                try:
                    actions.move_by_offset(random.randint(-2, 2), random.randint(-2, 2)).perform()
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
            
            # 6. –û—Ç–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É
            actions.release(button).perform()
            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—É—â–µ–Ω–∞")
            
            # 7. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
            await asyncio.sleep(random.uniform(2, 4))
            
            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            page_source = driver.page_source
            if "PRESS" not in page_source or "HOLD" not in page_source:
                logger.info("üéâ –ö–∞–ø—á–∞ PRESS & HOLD —É—Å–ø–µ—à–Ω–æ –æ–±–æ–π–¥–µ–Ω–∞!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ö–∞–ø—á–∞ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
                return await self._retry_captcha_bypass(driver)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º –æ–±—Ö–æ–¥–µ PRESS & HOLD: {e}")
            return False
    
    async def _bypass_perimeterx_advanced(self, driver) -> bool:
        """–ü–†–û–î–í–ò–ù–£–¢–´–ô –æ–±—Ö–æ–¥ PerimeterX –∫–∞–ø—á–∏"""
        try:
            logger.info("üõ°Ô∏è –û–±—Ö–æ–¥–∏–º PerimeterX –∫–∞–ø—á—É...")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ PerimeterX
            await asyncio.sleep(3)
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã PerimeterX
            px_selectors = [
                "div[class*='px-captcha']",
                "div[id*='px-captcha']",
                "iframe[src*='px-captcha']",
                "//div[contains(@class, 'px-captcha')]",
                "//iframe[contains(@src, 'px-captcha')]"
            ]
            
            for selector in px_selectors:
                try:
                    if selector.startswith("//"):
                        element = driver.find_element(By.XPATH, selector)
                    else:
                        element = driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if element:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω PerimeterX —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                        # –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
                        element.click()
                        await asyncio.sleep(2)
                        break
                except:
                    continue
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            page_source = driver.page_source
            if "px-captcha" not in page_source.lower():
                logger.info("üéâ PerimeterX –∫–∞–ø—á–∞ –æ–±–æ–π–¥–µ–Ω–∞!")
                return True
            else:
                logger.warning("‚ö†Ô∏è PerimeterX –∫–∞–ø—á–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ö–æ–¥–µ PerimeterX: {e}")
            return False
    
    async def _bypass_generic_advanced(self, driver) -> bool:
        """–ü–†–û–î–í–ò–ù–£–¢–´–ô –æ–±—Ö–æ–¥ –æ–±—â–µ–π –∫–∞–ø—á–∏"""
        try:
            logger.info("ü§ñ –û–±—Ö–æ–¥–∏–º –æ–±—â—É—é –∫–∞–ø—á—É...")
            
            # –ò—â–µ–º –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏
            captcha_selectors = [
                "button[class*='captcha']",
                "div[class*='captcha']",
                "input[type='submit']",
                "button[type='submit']",
                "//button[contains(@class, 'captcha')]",
                "//div[contains(@class, 'captcha')]"
            ]
            
            for selector in captcha_selectors:
                try:
                    if selector.startswith("//"):
                        element = driver.find_element(By.XPATH, selector)
                    else:
                        element = driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if element:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∫–∞–ø—á–∏: {selector}")
                        element.click()
                        await asyncio.sleep(3)
                        break
                except:
                    continue
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            page_source = driver.page_source
            if "captcha" not in page_source.lower():
                logger.info("üéâ –û–±—â–∞—è –∫–∞–ø—á–∞ –æ–±–æ–π–¥–µ–Ω–∞!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –û–±—â–∞—è –∫–∞–ø—á–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ö–æ–¥–µ –æ–±—â–µ–π –∫–∞–ø—á–∏: {e}")
            return False
    
    async def _retry_captcha_bypass(self, driver) -> bool:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏ —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º"""
        try:
            logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            driver.refresh()
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            page_source = driver.page_source
            if "PRESS" in page_source and "HOLD" in page_source:
                return await self._bypass_press_hold_advanced(driver)
            else:
                logger.info("‚úÖ –ö–∞–ø—á–∞ –∏—Å—á–µ–∑–ª–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {e}")
            return False
    
    async def _register_with_captcha_bypass(self, email: str, username: str, password: str, telegram_bot = None, chat_id: int = None) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ–±—Ö–æ–¥–æ–º –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        try:
            # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome
            await self._kill_chrome_processes()
            await asyncio.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º UNDETECTED –±—Ä–∞—É–∑–µ—Ä —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú–ò –°–¢–ï–õ–° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º undetected –±—Ä–∞—É–∑–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—Ç–µ–ª—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –∫–∞–∫ —É –û–ë–´–ß–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            options = uc.ChromeOptions()
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ HEADLESS –¥–ª—è Railway
            self.driver = uc.Chrome(
                version_main=None,
                headless=True,  # HEADLESS –¥–ª—è Railway
                use_subprocess=True,
                options=options
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            self.driver.set_window_size(1920, 1080)
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ —É –û–ë–´–ß–ù–û–ì–û –±—Ä–∞—É–∑–µ—Ä–∞
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_script("delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array")
            self.driver.execute_script("delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise")
            self.driver.execute_script("delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'permissions', {
                    get: () => ({
                        query: () => Promise.resolve({state: 'granted'})
                    })
                });
            """)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
            self.driver.execute_script("""
                Object.defineProperty(screen, 'width', {get: () => 1920});
                Object.defineProperty(screen, 'height', {get: () => 1080});
                Object.defineProperty(screen, 'availWidth', {get: () => 1920});
                Object.defineProperty(screen, 'availHeight', {get: () => 1040});
            """)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Fiverr...")
            self.driver.get("https://it.fiverr.com/")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(3)
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await self._take_step_screenshot(self.driver, "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Fiverr", telegram_bot, chat_id, email)
            
            # –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ü–ß–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º –õ–£–ß–®–ò–ï –¢–ï–•–ù–û–õ–û–ì–ò–ò
            page_source = self.driver.page_source
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–ø—á–∏
            captcha_detected = False
            captcha_type = None
            
            if "PRESS" in page_source and "HOLD" in page_source:
                captcha_detected = True
                captcha_type = "PRESS_HOLD"
                logger.info("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ PRESS & HOLD - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–û–î–í–ò–ù–£–¢–´–ô –æ–±—Ö–æ–¥...")
            elif "px-captcha" in page_source.lower():
                captcha_detected = True
                captcha_type = "PERIMETERX"
                logger.info("üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ PerimeterX –∫–∞–ø—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –°–¢–ï–õ–° –æ–±—Ö–æ–¥...")
            elif "captcha" in page_source.lower():
                captcha_detected = True
                captcha_type = "GENERIC"
                logger.info("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ–±—â–∞—è –∫–∞–ø—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –æ–±—Ö–æ–¥...")
            
            if captcha_detected:
                await self._take_step_screenshot(self.driver, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞: {captcha_type}", telegram_bot, chat_id, email)
                
                # –ü–†–û–î–í–ò–ù–£–¢–´–ô –û–ë–•–û–î –ö–ê–ü–ß–ò
                captcha_bypassed = await self._advanced_captcha_bypass(self.driver, captcha_type)
                
                if not captcha_bypassed:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∫–∞–ø—á—É {captcha_type}")
                    return {
                        "success": False,
                        "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∫–∞–ø—á—É {captcha_type}"
                    }
                
                logger.info(f"‚úÖ –ö–∞–ø—á–∞ {captcha_type} —É—Å–ø–µ—à–Ω–æ –æ–±–æ–π–¥–µ–Ω–∞!")
                await self._take_step_screenshot(self.driver, f"–ö–∞–ø—á–∞ {captcha_type} –æ–±–æ–π–¥–µ–Ω–∞", telegram_bot, chat_id, email)
                
                # –ñ–¥–µ–º –ø–æ—Å–ª–µ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏
                await asyncio.sleep(2)
            
            # –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            try:
                # –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                email_selectors = [
                    "input[name='user[email]']",
                    "input[type='email']",
                    "input[placeholder*='email' i]",
                    "input[placeholder*='Email' i]",
                    "input[id*='email']",
                    "input[class*='email']"
                ]
                
                password_selectors = [
                    "input[name='user[password]']",
                    "input[type='password']",
                    "input[placeholder*='password' i]",
                    "input[placeholder*='Password' i]",
                    "input[id*='password']",
                    "input[class*='password']"
                ]
                
                username_selectors = [
                    "input[name='user[username]']",
                    "input[placeholder*='username' i]",
                    "input[placeholder*='Username' i]",
                    "input[id*='username']",
                    "input[class*='username']"
                ]
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è
                email_field = None
                password_field = None
                username_field = None
                
                for selector in email_selectors:
                    try:
                        email_field = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if email_field and email_field.is_displayed():
                            break
                    except:
                        continue
                
                for selector in password_selectors:
                    try:
                        password_field = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if password_field and password_field.is_displayed():
                            break
                    except:
                        continue
                
                for selector in username_selectors:
                    try:
                        username_field = self.driver.find_element(By.CSS_SELECTOR, selector)
                        if username_field and username_field.is_displayed():
                            break
                    except:
                        continue
                
                if not email_field or not password_field:
                    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã")
                    return {
                        "success": False,
                        "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è email –∏–ª–∏ password"
                    }
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
                email_field.clear()
                email_field.send_keys(email)
                logger.info("–ü–æ–ª–µ email –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è email
                await self._take_step_screenshot(self.driver, "Email –∑–∞–ø–æ–ª–Ω–µ–Ω", telegram_bot, chat_id, email)
                
                password_field.clear()
                password_field.send_keys(password)
                logger.info("–ü–æ–ª–µ password –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º username –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ
                if username_field:
                    username_field.clear()
                    username_field.send_keys(username)
                    logger.info("–ü–æ–ª–µ username –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                else:
                    logger.info("–ü–æ–ª–µ username –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ")
                
                logger.info("–ü–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
                await self._take_step_screenshot(self.driver, "–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", telegram_bot, chat_id, email)
                
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                submit_selectors = [
                    "button[type='submit']",
                    "input[type='submit']",
                    "button[class*='submit']",
                    "button[class*='register']",
                    "button[class*='signup']",
                    "button[class*='create']",
                    "//button[contains(text(), 'Register')]",
                    "//button[contains(text(), 'Sign up')]",
                    "//button[contains(text(), 'Create')]",
                    "//button[contains(text(), 'Join')]",
                    "//button[contains(text(), 'register')]",
                    "//button[contains(text(), 'sign up')]",
                    "//button[contains(text(), 'create')]",
                    "//button[contains(text(), 'join')]"
                ]
                
                submit_button = None
                for selector in submit_selectors:
                    try:
                        if selector.startswith("//"):
                            submit_button = self.driver.find_element(By.XPATH, selector)
                        else:
                            submit_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                        
                        if submit_button and submit_button.is_displayed():
                            logger.info(f"–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                            break
                    except:
                        continue
                
                if not submit_button:
                    logger.error("–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return {
                        "success": False,
                        "error": "–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    }
                
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                submit_button.click()
                logger.info("–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞")
                
                # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await self._take_step_screenshot(self.driver, "–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞", telegram_bot, chat_id, email)
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                await asyncio.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                current_url = self.driver.current_url
                page_source = self.driver.page_source
                
                if "success" in page_source.lower() or "welcome" in page_source.lower() or "dashboard" in current_url:
                    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    
                    # –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    await self._take_step_screenshot(self.driver, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", telegram_bot, chat_id, email)
                    
                    # –ü–æ–ª—É—á–∞–µ–º cookies
                    cookies = {}
                    for cookie in self.driver.get_cookies():
                        cookies[cookie['name']] = cookie['value']
                    
                    return {
                        "success": True,
                        "email": email,
                        "username": username,
                        "password": password,
                        "cookies": cookies,
                        "confirmation_code": None
                    }
                else:
                    logger.warning("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    return {
                        "success": False,
                        "error": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏"
                    }
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã: {e}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {str(e)}"
                }
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            }
        finally:
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
    
    async def register_account(self, email: str, email_service: EmailAPIService, email_id: str = None, telegram_bot = None, chat_id: int = None) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞ —Å email: {email}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            username = self._generate_username()
            password = self._generate_password()
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω username: {username}")
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å: {password}")
            
            # –°–†–ê–ó–£ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return await self._register_with_captcha_bypass(
                email=email,
                username=username,
                password=password,
                telegram_bot=telegram_bot,
                chat_id=chat_id
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }


async def register_accounts_batch(
    email_service: EmailAPIService,
    count: int,
    proxy: Optional[ProxyConfig] = None,
    use_proxy: bool = True,
    telegram_bot = None,
    chat_id: int = None,
    selected_domain: str = 'gmx.com'
) -> list:
    """–ü–∞–∫–µ—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    results = []
    
    async with FiverrRegistrator(proxy, use_proxy) as registrator:
        for i in range(count):
            try:
                logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}/{count}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω –∏–ª–∏ gmx.com –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω: {selected_domain}")
                
                # –ó–∞–∫–∞–∑—ã–≤–∞–µ–º email
                email_result = await email_service.order_email(selected_domain)
                if not email_result.get("email"):
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å email –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}")
                    results.append({
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å email",
                        "account_number": i+1
                    })
                    continue
                
                email = email_result["email"]
                email_id = email_result.get("id")
                logger.info(f"–ü–æ–ª—É—á–µ–Ω email: {email}")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                result = await registrator.register_account(
                    email=email,
                    email_service=email_service,
                    email_id=email_id,
                    telegram_bot=telegram_bot,
                    chat_id=chat_id
                )
                
                result["account_number"] = i+1
                results.append(result)
                
                if result.get("success"):
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {i+1} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
                if i < count - 1:
                    delay = random.uniform(10, 30)
                    logger.info(f"–ñ–¥–µ–º {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...")
                    await asyncio.sleep(delay)
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}: {e}")
                results.append({
                    "success": False,
                    "error": str(e),
                    "account_number": i+1
                })
    
    return results
